name: CI Pipeline

on:
  push:
    branches: [ master, dev/* ]
    paths:
      - '**/*.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/**'
  pull_request:
    branches: [ master, dev/* ]
    paths:
      - '**/*.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]


    - name: Run unit tests
      run: |
        python -m unittest discover tests -v

    - name: Run pytest with coverage (if available)
      run: |
        if python -c "import pytest" 2>/dev/null; then
          pytest tests/ --cov=antigine --cov-report=xml --cov-report=term-missing
        else
          echo "pytest not available, skipping coverage"
        fi
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]


    - name: Check code formatting with Black
      run: |
        black --check --diff antigine/ tests/ scripts/
        echo "✅ Code formatting check passed"

    - name: Run flake8 linting
      run: |
        flake8 --max-line-length=120 --extend-ignore=E203,W503 antigine/ tests/ scripts/
        echo "✅ Linting passed"

    - name: Run mypy type checking
      run: |
        mypy antigine/
        echo "✅ Type checking passed"

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security linter
      run: |
        bandit -r antigine/ -f json -o bandit-report.json || true
        bandit -r antigine/ || true
      continue-on-error: true

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
      continue-on-error: true

  build-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package metadata
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        antigine --help || echo "CLI help not available yet"